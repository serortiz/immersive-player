import { init, remotePlayer, uiReady, lifecycle, getDeviceInfo, envInfo, getPlatformInfo } from "@Synamedia/hs-sdk";

const TEST_VIDEO="https://d3aebn8jgh8nvm.cloudfront.net/test/testpic_2s/default.mpd";

const defaultTimeout = 30000; //milliseconds
let uiTimeout;
let timeoutID = 0;

/* eslint-disable no-console */

function moveToForeground() {
    lifecycle.moveToForeground();
    document.getElementById("ui").style.visibility = "visible";
    document.getElementById("spinner").style.visibility = "hidden";
    timeoutID = setTimeout(timeoutCase, uiTimeout);
    console.info(`Setting timeout to ${uiTimeout} ms to start playback`);
}

async function startPlayback() {
    console.info("Start playback, call load & play");
    await remotePlayer.load(TEST_VIDEO);
    remotePlayer.play();
    document.getElementById("spinner").style.visibility = "visible";
    document.getElementById("ui").style.visibility = "hidden";
}

window.addEventListener("load", async () => {
    await init();
    document.getElementById("tenantId").innerText=getDeviceInfo().tenant;
    document.getElementById("deviceId").innerText=getDeviceInfo().deviceId;
    document.getElementById("communityId").innerText=getDeviceInfo().community;
    document.getElementById("remoteBrowserIp").innerText=envInfo.remoteBrowserIp;
    setTimeout(uiReady, 50);
    uiTimeout = getPlatformInfo().sessionInfo?.settings?.webUI?.defaultUITimeout || defaultTimeout;
    const currentState = await lifecycle.getState();
    console.info("Current state is", currentState);
    if (currentState === "foreground") {
        timeoutID = setTimeout(timeoutCase, uiTimeout);
    }
});

document.addEventListener("keydown", async (event) => {
    console.info("Keydown event, event.key is", event.key);
    const currentState = await lifecycle.getState();
    console.info("Current state is", currentState);

    if (event.key === "Escape") {
        if (currentState === "background") {
            moveToForeground();
        } else {
            console.info("Ignoring 'Escape' while in any state other than 'background'");
        }
    } else if (event.key === "Enter") {
        if (currentState === "foreground") {
            if (timeoutID !== 0) {
                clearTimeout(timeoutID);
                timeoutID = 0;
            }
            await startPlayback();
        } else {
            console.info("Ignoring 'Enter' while in any state other than 'foreground'");
        }
    } else {
        console.info("Ignoring key. Reacting only to Enter and Escape");
    }
}, false);

async function timeoutCase() {
    console.info("timeout expired");
    timeoutID = 0;
    await startPlayback();
}

remotePlayer.addEventListener("ended", () => {
    moveToForeground();
});
remotePlayer.addEventListener("error", () => {
    moveToForeground();
});
